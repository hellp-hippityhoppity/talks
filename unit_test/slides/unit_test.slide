Testing the "Standard" Way
27 Oct 2015
Tags: go meetup, unit testing, standard library, go northeast, golang northeast

Nathan Davies
Software Engineer, Turnitin
ndavies@turnitin.com
@nathj07

* Scene Setting
- Standard library only; testing package
- Very contrived code!
- Table Based Tests
- Coverage
- Interfaces and Composition
- Benchmarking

* Primer
- Testing package is part of the standard library
- '_test.go' file name
- testing.T
  func TestSomeFunc (t *testing.T)
- t.Errorf: Allows the error to be reported but the code to continue in _this_ test function
- t.Fatalf: Reports the error and _stops_ this test function
- testing.B
  func BenchmarkSomeFunc (t *testing.B)
- testing.M - TestMain (since Go 1.4), has a gotcha or 2
  func TestMain (t *testing.M)

* My Typical Workflow
- Intial code
- Basic test
- More tests, more code
- check the coverage as I go
- **Bugs* it's test to prove the fail
- code to pass the test e.g. my work on govalidator
- run a single test
  go test -test.run=TestName

* Conversation App (contrived code warning)

* Some TDD - Red to Green!
  conversation_test.go
.code ../code/conversation/conversation_test.go /^func TestGreeting/,/^}/
- It proves the required function definition
- This is rudimentary, the very basis of red-to-green TDD
  conversation.go
.code ../code/conversation/conversation.go /^func Greeting/,/^}/

* The App Advances
- Might be nice to have multi-lingual support
- Be nice to have more complex replies

* Take the TDD Path
.code ../code/conversation/conversation_test.go /FR_ES/,/FR_ES/
  go test -test.run=TestGreeting[FS]

* Now the Function
.code ../code/conversation/conversation.go /^func GreetingV2/,/^}/
- The tests will pass:
  go test -test.run=TestGreetingV2[FS] -v

* Refactor
- The previous tests are beneficial
- Also very repetitive
- More languages = more test cases. Very tedious
- Be better to have less repetition in tests
- Be nice if it were easier to add tests

* Table Based Testing
- Define a local scope test set
- Typically a slice of structs covering the inputs and outputs
.code ../code/conversation/conversation_test.go /TABLE/,/TABLE/

* The Test
.code ../code/conversation/conversation_test.go /^func TestGreetingV2All/,/^}/

* It's a Bug!
- Run a little demo!

* Fixed!
- prove the bug exists
- fix the bug
- prove it's fixed
- confirm no regression

* Benefits of TableBased Tests
- Adding more language support = add a new struct
- Test code is easy to read
- Test output is clear
- Coverage is clear from the test code
- Tests are faster to write
- Bugs are easier to prove and fix

* Coverage
  go test -cover
  go test -coverprofile="coverage.out"
- easy to see what code is being tested and what is not
- -cover shows the percentage of code covered by tests
- to the console!

* Interfaces & Composition
- You should be using interfaces in your Go code
.code ../code/oai/oai.go /^type Fetcher interface/,/^}/
.code ../code/oai/oai.go /IMPLEMENT/,/IMPLEMENT/

* Interface in test
- mock/fake components in your test
.code ../code/oai/oai_test.go /TESTMOCK/,/TESTMOCK/
  TO THE CODE!
- Test focusses on handling the response
- Test runs without internet connection
- We don't spam a live server
(could've used httptest - talk to me later)

* Benchmarking
- Built in to the language
- No need to write timers and calculate ns/op
.code ../code/fibonacci/fibonacci.go

* The Test
.code ../code/fibonacci/fibonacci_test.go /^func TestGetnth/,/^}
   go test -test.run=TestGetnth

* The Benchmark
.code ../code/fibonacci/fibonacci_test.go /^func BenchmarkGetnthDepth/,/^}/
.code ../code/fibonacci/fibonacci.bench
- Each test looks further into the series
- Could change the test to get only one position
  go test -bench="BenchmarkGetnthSingle"
- This shows that we could implement some effeciencies to reduce time reaching further into the series.

* Highlights / Why I love Go testing
- only Go code
- coverage
- benchmarks
- flexible tool chain
   go test -help


* Extra Features
- you can use profiling on tests:
   go test -cpuprofile=test.prof
- race - useful for finding some potential race conditions, particularly helpful in highly concurrent, long running applications
   go test -race
- httptest - implement a test server for serving responses; come talk to me
- play around with testing

* More Advanced & Libraries
- Libraries like go-convey and gocheck are worth exploring, I've tried gocheck and found I don't need it.
- I do use testify/mock for asserting functions were called, and ensuring returns
- When tests don't pass reach for godebug - maybe another session on this.
- Test Runners - test table becomes a full test spec

* References
- http://dave.cheney.net/2013/06/30/how-to-write-benchmarks-in-go
- Andrew Gerrand Stupid Gopher Tricks: https://www.youtube.com/watch?v=UECh7X07m6E
- https://smartystreets.com/blog/tags/testing-in-go-series
- http://nathanleclaire.com/blog/2015/10/10/interfaces-and-composition-for-effective-unit-testing-in-golang/
- https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742
- https://github.com/nathj07/talks/unit_test - for all code and slides

* Q&A