Unit Testing
27 Oct 2015
Tags: go meetup, unit testing, standard library, go northeast

Nathan Davies
Software Engineer, Turnitin
ndavies@turnitin.com
@nathj07

* Scene Setting
- Very contrived code!
- Standard library only; testing package
- Start simple
- Refactor
- Table Based Tests
- Coverage
- Benchmarking

* Using the Standard Library
- Test Code
- Code to test
- Will drop to my shell run tests
- COVER THE BASICS - the code file and the _test.go file; the tesing.T, .B, and .M

* My Typical Workflow
- Intial code
- Basic test
- More tests, more code
- check the coverage as I go
- For bugs it's test to prove the fail
- Code to pass the test e.g. my work on govalidator
- -test.run=TestName - to run a single test case

* Some TDD
.code ../code/conversation/conversation_test.go /^func TestGreeting/,/^}/
- Until the function is written this won't run
- Once written we prove the function defintion - signature and body
- t.Errorf: Allows the error to be reported but the code to continue in _this_ test function
- t.Fatalf: Reports the error and _stops_ this test function
- This is rudimentary, the very basis of red-to-green TDD

* The App Advances
- Might be nice to have multi-lingual support
- Be nice to have more complex replies

* Take the TDD Path
.code ../code/conversation/conversation_test.go /FR_ES/,/FR_ES/

* Now the Function
.code ../code/conversation/conversation.go /^func GreetingV2/,/^}/
- The tests will pass - check it out with go test -v
- More languages = more test cases. Very tedious

* Refactor
- The previous tests are beneficial
- Also very repetitive
- Be better to have less repetition in tests
- Be nice if it were easier to add tests

* Table Based Testing
- Define a local scope test set
- Typically a slice of structs covering the inputs and outputs
.code ../code/conversation/conversation_test.go /TABLE/,/TABLE/

* The Test
.code ../code/conversation/conversation_test.go /^func TestGreetingV2All/,/^}/

* Benefits
- Adding more language support = add a new struct
- Test code is easy to read
- Test output is clear
- Coverage is clear from the code
- Tests are faster to write
- Bugs are easier to prove and fix (_demo_)

* Coverage
- easy to see what code is being tested and what is not
- -cover shows the percentage of code covered by tests
- to the console!

* Interfaces & Composition
- You should be using interfaces in your Go code
.code ../code/oai/oai.go /^type Fetcher interface/,/^}/
.code ../code/oai/oai.go /IMPLEMENT/,/IMPLEMENT/

* Interface in test
- This enables you to mock componenets in your test
.code ../code/oai/oai_test.go /TESTMOCK/,/TESTMOCK/
- Test focusses on handling the response
- Test runs without internet connection
- We don't spam a live server

* Benchmarking
- Built in to the language
- No need to write timers and calculate ns/op
.code ../code/fibonacci/fibonacci.go

* The Test
.code ../code/fibonacci/fibonacci_test.go /^func TestGetnth/,/^}


* The Benchmark
.code ../code/fibonacci/fibonacci_test.go /^func BenchmarkGetnth/,/^}/
.code ../code/fibonacci/fibonacci.bench
- Each test looks further into the series
- Could change the test to get only one position _demo_
- This shows that we could implement some effeciencies to reduce time reaching further into the series.

* Extra features 
- Since Go 1.4 there is TestMain() a suite level setup method
- one per package
- can handle suite level set-up and teardown
- cannot use defer as it using os.Exit()
- you can use profiling on tests: -cpuprofile=test.prof
- race - useful for finding some potential race conditions, particularly helpful in highly concurrent, long running applications

* More Advanced & Libraries
- Test runners. TODO: Consider this - either add in properly somewhere or remove
- Libraries like go-convey and gocheck are worth exploring, I've tried gocheck and found I don't need it.
- I do use testify/mock for asserting functions were called, though I could live without it.
- When tests don't pass reach for godebug - maybe another session on this.

* References
- http://dave.cheney.net/2013/06/30/how-to-write-benchmarks-in-go
- Andrew Gerrand Stupid Gopher Tricks: https://www.youtube.com/watch?v=UECh7X07m6E
- https://smartystreets.com/blog/tags/testing-in-go-series
- http://nathanleclaire.com/blog/2015/10/10/interfaces-and-composition-for-effective-unit-testing-in-golang/
- https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742

* Q&A