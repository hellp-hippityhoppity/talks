Structure Tips
23 October 2018
Tags: go meetup, structure, packages, structs, tips, organisation, go northeast, golang northeast

Nathan Davies
Snr Software Engineer, Turnitin
ndavies@turnitin.com nathanjamesdavies@gmail.com
http://github.com/nathj07/talks/structuretips
@nathj07

* Scene Setting
- routes.go
- Define a package
- common? utils? shared?
- DAMP v DRY
: This talk is a little different from my usual fare, it is a little less organised and just a small collection
: hints and tips and ideas I've picked up a long the way.
: This is somewhat opinionated
: The hope is that some of these will be useful to you too; but there's not other overarching theme here.

* routes.go
- Thank you Matt Ryer
- Http routes defined in one file
- File is of single purpose
- On startup just call defineRoutes()
: This one was a big change for us.
: Previously had all the routes defined in an app.go, right where we would start the app
: All those routes cluttered up the business of starting the app
: Now we just call defineRoutes()
: Any developer still knows where to find route definitions, but the app startup code is clean

* Define a package
- Purpose v Data
- Be consistent on this
- Attempt to keep files small
: I find it helpful to think of a package as either focused on the data it dealing with or on the purpose it serves
: Which makes most sense can vary based on the application
: If you pick purpose or function then everything in that package should be for that purpose
: If you pick data then everything in that package is about that data and only that data
: File size is not that big a deal really. As a personal preference I don't enjoy wading through massive code files
: Often, though, you can find logical places to split a single file into more files, each focused on a subset of the
: packages responsibility.

* common? utils? shared?
- A lot of hate for these
- Sometimes useful
- Have focused files
- Focused files can become focused packages
: There is a lot of hate for the common package or the utils, or shared package or whatever other name
: you want to give to the general purpose package you may have in your code.
: If you have package responsibility or focus defined by purpose this become simpler.
: We've had a shared package hold all sorts. Each file was of a specific purpose, so we made focussed packages
: Now it is easier to find the code we are looking for.
: It's not always simple and sometimes shared, or utils just makes so much sense, but it's worth taking some time
: to see if there is a better option.

DAMP V DRY
- Don't Repeat Yourself
- Don't Abstract Methods Prematurely (Matt Ryer again, twitter this time)
- A little copying is better than a little dependency (Rob Pike)
: There's a balance here.
: It's about timing. Sometimes we think something will be used lots, and we abstract it out. Then it's only used once.
: If that is the case refactor it to be not abstracted
: Abstracting early is a little premature optimization, we shouldn't do it
: I would suggest if you need it once, write it where you need it. If you need it twice, copy it, assuming it's simple.
: If you need it a 3rd time, then refactor. Works as a rule of thumb, it's not hard and fast

TODO: ADD IMAGES TO SLIDES oras title slides




* References
- https://medium.com/statuscode/how-i-write-go-http-services-after-seven-years-37c208122831
- https://go-proverbs.github.io/

