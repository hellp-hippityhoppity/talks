The Power of Middleware
24 April 2018
Tags: go meetup, unit testing, standard library, go northeast, golang northeast

Nathan Davies
Senior Software Engineer, Turnitin
ndavies@turnitin.com
@nathj07

* Scene Setting
- What? Why? How?
- Code Dojo
- Conclusion

* What?

"A Middleware is a type that wraps a handler to remove boilerplate or other concerns not direct to any given Handler."
.link https://github.com/ardanlabs/service/blob/master/internal/platform/web/middleware.go#L3 William Kennedy


"When we talk about Middleware in Go, at its simplest, we are really talking about running code before and/or after our handler code in a HTTP request lifecycle."
.link https://medium.com/@matryer/writing-middleware-in-golang-and-how-go-makes-it-so-much-fun-4375c1246e81 Mat Ryer

* Why? 

Code sharing
Retaining focus in handlers

Typical examples include:
- Logging
- Timing
- Distributed Tracing

* How?

* Basic Server
.code ../code/basic/main.go /START OMIT/,/END OMIT/
- Familiar with this, simple handler
- Nothing special here

* Allowing Middleware
Use a function that takes _and_ returns a `http.Handler`
.code ../code/simplemw/main.go /^func logging/,/^}/

* Applying Single Middleware
.code ../code/simplemw/main.go /^func main/,/^}/
- wrap the main handler in `logging()`
- not sustainable for lots of middleware
- let's play first!

* Code Dojo Part 1
- A basic webserver - clone the simple temaplate file: https://github.com/nathj07/mw_dojo_templates
- Need to know when a `path` is requested and when it is served

Now add more endpoints and handlers and see the middlware applied
.image images/gophercises_punching.gif 300 600


* Applying More Middleware
- not very scalable, wrapping each handler like that
- can't realistically apply multiple middlewares in that manner
- multiple middlewares can be applied
- custom type, chainging function

* Applying More Middleware - code snippet
.code ../code/multiplemw/main.go /START OMIT/,/END OMIT/
- the power of defining custom function type is really helpful here

.code ../code/multiplemw/main.go /^func Chain/,/^}/
- apply all of the middelware at once


* Code Dojo Part 2
The webserver now needs to:
- log the request, including referrer if present
- track the time
- check the username in the query string/header error if neither, else display friendly welcome
- handle rudimentary tracing
 e.g check for UUID in header, if not add, if there is log it and the new request

Now add more endpoints and handlers and see the middlware applied
.image images/gophercises_punching.gif 250 500

* Concluding Remarks
- Middleware is very powerful
- Middleware is pretty simple
- Try it out: opentracing, logging, authorisation etc

* References
.link https://medium.com/@matryer/writing-middleware-in-golang-and-how-go-makes-it-so-much-fun-4375c1246e81
.link https://gowebexamples.com/basic-middleware/
.link https://gowebexamples.com/advanced-middleware/
.link https://github.com/nathj07/talks/middleware https://github.com/nathj07/talks/middleware - for all code and slides